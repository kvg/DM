NAME
    DistributedMake::base - A perl module for running pipelines

VERSION
    0.1.008

SYNOPSIS
    todo

GOOD PRACTICE
    - Never make a directory a dependency. DistributedMake creates
    directories as it needs them. - Never create rules that delete files.
    Delete files by hand instead. Chances are, Youwill be sorry otherwise. -
    make runs in dryRun mode by default (this is for your own safety!). Pass
    in 'dryRun => 0' to new() to run.

_check_arg_consistency
    We should really be checking arguments in one central place, instead of
    ad-hoc throughout the script - winni This will allow us to make
    DistributedMake "fussy".

  execute()
    This method is called after all rules have been defined in order to
    write the make file and execute it. No mandatory options. Takes only
    overrides.

Job Arrays
  Workflow
    First, initialize a job array with startJobArray(). Add rules to the job
    array with addJobArrayRule(). Last, call endJobArray() to signal that no
    more rules will be added to this particular job array. Multiple job
    arrays can be defined after each other in this manner. execute() can
    only be called if the most recently started job array has been completed
    with endJobArray.

    On SGE, the job array will only be started once the prerequisites of all
    job array rules have been updated. On other platforms, each job will
    start once its prerequisite has been updated. However, on all platforms,
    the job array target will only be updated once all rules have completed
    successfully.

  startJobArray()
    daes nothing unless 'cluster' eq 'SGE'. Requires 'target' and
    'globalTmpDir' to be specified as input keys:
    startJobArray(target=>$mytarget, globalTmpDir=>$mytmpdir)

  addJobArrayRule()
     This structure is designed to work with SGE's job array functionality.  Any rules added to a jobArray structure will be treated as simple add rules when running on localhost, LSF or PBS, but will be executed as a jobArray on SGE.

    takes three inputs: target, prereqs, command as such:
    addJobArrayRule(target=>$mytarget, prereqs=>\@myprereqs,
    command=>$mycommand);

    prereqs may also be a scalar

  endJobArray()
    Adds the rule that kicks off the job array. Returns the target of the
    job array.

    see startJobArray() for further description.

AUTHOR
    Kiran V Garimella, "<kiran at well.ox.ac.uk>"

BUGS
    Please report any bugs or feature requests to "bug-distributedmake-base
    at rt.cpan.org", or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DistributedMake-base>. I
    will be notified, and then you'll automatically be notified of progress
    on your bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc DistributedMake::base

    You can also look for information at:

    *   RT: CPAN's request tracker (report bugs here)

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=DistributedMake-base>

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/DistributedMake-base>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/DistributedMake-base>

    *   Search CPAN

        <http://search.cpan.org/dist/DistributedMake-base/>

ACKNOWLEDGEMENTS
LICENSE AND COPYRIGHT
    Copyright 2012 Kiran V Garimella.

    This program is free software; you can redistribute it and/or modify it
    under the terms of either: the GNU General Public License as published
    by the Free Software Foundation; or the Artistic License.

    See http://dev.perl.org/licenses/ for more information.

